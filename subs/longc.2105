
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include <mv_utils.h>
#include <functions.h>

int longc(double *dtaum, double *sm, double *jm, double *diagm,
	     double fincd, int nd,double *pool)
 {
  /*
   *     driver for the formal solution of the radiative transfer
   *     equation by the method of long characteristics
   */

  register int id,td;
  register double *ex0, *ex1, *ex2, *riin, *riup, *aiin, *aiup, *tau;
  double	tmp;

  ex0=(double *) (pool);
  ex1=(double *) (pool+nd);
  ex2=(double *) (pool+2*nd);
  riin=(double *) (pool+3*nd);
  riup=(double *) (pool+4*nd);
  aiin=(double *) (pool+6*nd);
  aiup=(double *) (pool+7*nd);
  tau =(double *) (pool+8*nd);

  tau[0]=0.0;

  for(id=0;id<nd-1;id++)
   {
    tau[id+1]=tau[id]+dtaum[id];
   }

  for(id=0;id<nd;id++)
   {
    ex0[id]=exp(tau[id]-tau[nd-1]);
    ex1[id]=exp(tau[id]);
    ex2[id]=exp(-tau[id]);
   }

  for (id=0;id<nd;id++)
   {
    /* incoming intensity */
    riin[id]=0.0;
    riup[id]=0.0;

    for (td=1;td<=id;td++)
     {
      if (tau[td]>1e-2)   /* it's just a guess */
       {
        tmp=(    ex1[td]-    ex1[td-1])/dtaum[td-1];
        riin[id]+=sm[td-1]*(    ex1[td]-tmp)+sm[td]*(    -ex1[td-1]+tmp);
       }
      else
       {
        riin[id]+=dtaum[td-1]/2.0*(sm[td-1]*(1.0+tau[td])+sm[td]*(1.0+tau[td-1]));
       }
     }
    riin[id]*=ex2[id];

    /* outgoing intensity */
    for (td=id;td<nd-1;td++)
     {
      if (tau[td]>1e-2)   /* it's just a guess */
       {
        tmp=(ex2[td]-ex2[td+1])/dtaum[td];
        riup[id]+=sm[td  ]*(+tmp-ex2[td+1])+sm[td+1]*(-tmp+ex2[td  ]);
       }
      else
       {
        riup[id]+=dtaum[td]/2.0*(sm[td]*(1.0-tau[td+1])+sm[td+1]*(1.0-tau[td]));
       }
     }

    riup[id]*=ex1[id];
    riup[id]+=fincd*ex0[id];
   } /* id - riin and riup */

  for(id=1;id<nd;id++)
   {
    if ((dtaum[id-1]<1e-2)&&(tau[id-1]<1e-2))
     {
      aiin[id]=dtaum[id-1]*(1.0+tau[id-1])/(1.0+tau[id]);
     }
    else
     {
      aiin[id]=(-ex1[id]+(ex1[id]-ex1[id-1])/dtaum[id-1])*ex2[id];
     }
    aiup[id-1]=aiin[id]; /* ???? */
   }

  riin[0]=0.0;
  aiin[0]=0.0;
  riup[nd-1]=fincd;
  aiup[nd-1]=0.0;

/* final symmetrized (Feautrier) intensity -- (riin+riup)/2 */

  for(id=0;id<nd;id++)
   {
    jm[id]   =(riin[id]+riup[id])/2.0;
    diagm[id]=(aiin[id]+aiup[id])/2.0;
/*
printf(" longc: id=%3i jm=%2.3e jin=%2.3e jup=%2.3e diag=%2.3e ain=%2.3e aup=%2.3e\n",
id, jm[id],riin[id],riup[id], diagm[id],aiin[id],aiup[id]);
*/
   }

 return 0;
}

double exp_m1(double x)
 {
  int i;
  double eps,r,b;
  eps=1e-40;
  b=0.0;
   for (i=2,r=-x;((r>eps) || (r<-eps));i++)
    {
     b+=r;
     r*=-x/i;
    }
  return -b;
 }

