
#include <stdio.h>
#include <stdlib.h>

#include <struct.h>
#include <subroutines.h>
#include <mv_utils.h>

int fill_AVV ( 
		PLINE			*pline,
	       	ROTLEVEL		*r_level,
	       	PBAND_AVV		*pavv_band,
	       	MOLECULE		*mol,
	       	PARAMETERINFO		*pars )

{
 int		irt,jrt,iavv;
 int		*U, *L;
 int		NAVV,NRT;
 int		iru,irl;
 LINE		*line;
 BAND_AVV	*avv_band;
  
	avv_band=NULL;
	NAVV=0;
	pavv_band->NUM=0;

	NRT =pline->NRT;
	printf("\nfill_AVV.c: NRT=%d\n",NRT);
	if(!NRT) return 0;

	line=pline->line;
		
 	U=vec_IMEMALLOC(NRT);
 	L=vec_IMEMALLOC(NRT);

	for (irt=0;irt<NRT;irt++)
	{
	 iru=line[irt].iru_index;
	 irl=line[irt].irl_index;
	 U[irt]=r_level[iru].vl_name+100000*r_level[iru].iso;
	 L[irt]=r_level[irl].vl_name+100000*r_level[irl].iso;
	}	

	for (irt=0;irt<NRT-1;irt++)
	{
	 if ( U[irt] && L[irt] )
	 {
	  for (jrt=irt+1;jrt<NRT;jrt++)
	  {
	   if ( 
	      ( U[jrt] == U[irt] ) &&
	      ( L[jrt] == L[irt] )
	      )
	   {
	    U[jrt]=0;
	    L[jrt]=0;
	   }
	  }
	 }
	}
	   

	avv_band=NULL;
	iavv=0;
	for (irt=0;irt<NRT;irt++)
	{	
	 if ( U[irt] && L[irt] )
	 {
	  avv_band= (BAND_AVV *) realloc(avv_band,(iavv+1)*sizeof(BAND_AVV));
	  CHECK_PTR(avv_band);
	  avv_band[iavv].mole=iso_name_to_iMol(line[irt].iso,mol,pars);
	  avv_band[iavv].iso=line[irt].iso;
	  avv_band[iavv].itl_index=irt;
	  iru=line[irt].iru_index;
	  irl=line[irt].irl_index;
	  avv_band[iavv].ivu_index=r_level[iru].ivl;
	  avv_band[iavv].ivl_index=r_level[irl].ivl;
	  avv_band[iavv].active=1;
	  iavv++;	  
	 }
	}
	
	NAVV=iavv;
	pavv_band->NUM=NAVV;
	pavv_band->band=avv_band;
	pavv_band->pline=pline;

	for (iavv=0;iavv<NAVV-1;iavv++)
	{
	 avv_band[iavv].itu_index=avv_band[iavv+1].itl_index-1;
	} 	 

	avv_band[NAVV-1].itu_index=NRT-1;

#if 0
	/* check for doubles now. hmm, it can't happen anyway */

	for (iavv=0;iavv<NAVV-1;iavv++)
	 for (javv=iavv+1;javv<NAVV;javv++)
	  if(
	      ( avv_band[iavv].ivu_index == avv_band[javv].ivu_index ) &&
	      ( avv_band[iavv].ivl_index == avv_band[javv].ivl_index )
	    )
	  {
	   printf("Found duplicated iavv=%d javv=%d entry. Bye...\n",
	           iavv,javv);
	   exit(1);
	  }
#endif	

	free(U);
	free(L);

 return NAVV;
} 
